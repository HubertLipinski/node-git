#! /usr/bin/env node
import{Command as e,Option as t,Argument as r}from"commander";import o from"node:fs";import{stringify as n,parse as i}from"ini";import s from"path";import c from"node:zlib";import a from"node:crypto";import d from"node:assert";import{globSync as l}from"glob";import{EOL as m,homedir as u}from"os";const f=process.cwd(),p=process.env._NODE_GIT_DIRECTORY??".nodegit",h=s.join(f,p),w=(...e)=>0===e.length?h:s.join(h,...e),g=(e="")=>s.join(f,e),y=(e,t=!1)=>{!t&&o.existsSync(e)||o.mkdirSync(e)},$=e=>e.replaceAll("\\","/"),b=(e,t,r=!0)=>{const o=s.join(e,t);return r?$(o):o},S=s.join(h,"config");const v=()=>{o.mkdirSync(h,{recursive:!0}),o.mkdirSync(w("objects"),{recursive:!0}),o.mkdirSync(w("refs","heads"),{recursive:!0}),o.writeFileSync(w("HEAD"),"ref: refs/heads/master\n")},E=()=>{o.writeFileSync(S,n({core:{repositoryformatversion:0,filemode:!1,bare:!1}}))},x=e=>({directory:e.slice(0,2),filename:e.slice(2)}),B=e=>{const t=x(e);return o.existsSync(w("objects",t.directory,t.filename))},j=(e,t=!0)=>{const r=x(e);return t?w("objects",r.directory,r.filename):`${r.directory}/${r.filename}`},F=e=>{const t=(e=>{const t=x(e),r=w("objects",t.directory,t.filename);if(!B(e))throw new Error(`File not found: ${e}`);return o.readFileSync(r)})(e),r=c.inflateSync(t),n=r.toString(),i=n.split(" ")[0],s=n.split(" ")[1].split("\0")[0],a=r.subarray(i.length+s.length+2);return{type:i,size:parseInt(s),content:a}},D=(e,t)=>{const r=x(e);o.mkdirSync(w("objects",r.directory),{recursive:!0}),o.writeFileSync(j(e),t)},I=e=>{const t=[];let r=0;for(;r<e.length-40+1;){const o=e.indexOf(0,r),[n,i]=e.subarray(r,o).toString("utf8").split(" "),s=e.subarray(o+1,o+40+1).toString("utf8");r=o+40+1,t.push({mode:n,type:z(n),hash:s,filename:i})}return t},A=(e,t)=>{for(const r of e){const e=s.join(t,r.filename),n=F(r.hash);if("tree"===r.type){o.existsSync(e)||o.mkdirSync(e);const n=F(r.hash);A(I(n.content),`${t}/${r.filename}`)}else"blob"===r.type&&o.writeFileSync(e,n.content,{encoding:"utf-8"})}},z=e=>{switch(e){case"040000":return"tree";case"100644":case"100755":case"120000":return"blob";default:throw new Error(`Unknown file mode: ${e}`)}};const U=(e,t="hex")=>a.createHash("sha1").update(e).digest(t),k=e=>{if(!o.existsSync(e))throw new Error(`File not found: ${e}`);const t=o.readFileSync(e),r=`blob ${t.length}\0${t}`,n=U(r),i=c.deflateSync(r);return D(n,i),n};const O=(e=!1)=>{const t=[];for(const r of(()=>{const e=[{path:"",rules:[{rule:".git",ignored:!0},{rule:".git/**",ignored:!0},{rule:".nodegit",ignored:!0},{rule:".nodegit/**",ignored:!0}]}],t=o.readdirSync(g(),{recursive:!0,withFileTypes:!0}).filter((e=>".gitignore"===e.name));for(const r of t){const t=s.relative(g(),r.path),o={path:0===t.length?".":t,rules:T(s.join(r.path,".gitignore"))};e.push(o)}return e})())r.rules.forEach((o=>{let n=s.join(r.path,o.rule);e&&(n=g(n)),n=$(n),t.push(n)}));return t},T=e=>{const t=[],r=o.readFileSync(e,"utf-8").toString().split(m);for(const e of r){const r=C(e);r&&t.push(r)}return t},C=e=>{const t=e.replace(m,"").trim().replaceAll(/\\/g,"/");switch(t[0]??""){case"#":case"":return null;case"!":return{rule:H(t.slice(1)),ignored:!1};case"\\":return{rule:H(t.slice(1)),ignored:!0};default:return{rule:H(t),ignored:!0}}},H=e=>e.endsWith("/")?e+"**":e,N=e=>new Date(1e3*parseInt(e.toString("hex"),16)),M=()=>{const e=w("index");if(!o.existsSync(e))return{version:2,size:0,entries:[]};const t=o.readFileSync(e,"binary"),r=Buffer.from(t,"binary"),n=r.subarray(0,12),i=n.subarray(0,4);d("DIRC"===i.toString(),"Invalid signature");const s=n.readUIntBE(4,4);d(2===s,"Only version 2 is supported");const c=n.readUIntBE(8,4),a=[];let l=0;const m=r.subarray(n.length);for(let e=0;e<c;e++){const e=m.subarray(l,l+4),t=m.subarray(l+8,l+12),r=m.subarray(l+16,l+20),o=m.subarray(l+20,l+24),n=m.subarray(l+24,l+28),i=m.subarray(l+28,l+32),s=m.subarray(l+32,l+36),c=m.readUInt32BE(l+36),d=m.subarray(l+40,l+60),u=m.readUIntBE(l+60,2).toString(2),f=u[0].toString(),p=u[1]?.toString()??"-1",h=parseInt(u.slice(1,3),2),w=4095&parseInt(u,2);let g=null;if(l+=62,!(w<4095))throw new Error(`File name length is too long: ${w} > 4095 bytes`);g=m.subarray(l,l+w).toString("utf8"),l+=w+1,l=8*Math.ceil(l/8),a.push({createdTime:N(e),modifiedTime:N(t),dev:r.toString("hex"),ino:o.toString("hex"),mode:n.toString("hex"),uid:i.toString("hex"),gid:s.toString("hex"),size:c,hash:d.toString("hex"),fileName:g,flags:{binary:u.toString(),valid:f,extended:p,stage:h.toString(2)}})}return{version:s,size:c,entries:a}},R=(e="**",t={},r=!1)=>l(e,{ignore:O(r),dot:!0,...t});function P(e="."){e=$(g(e));const t=R("*",{root:"",cwd:e,stat:!0,withFileTypes:!0},!0),r=[];for(const e of t)e.isDirectory()?r.push({mode:"040000",filename:e.name,hash:P(s.relative(g(),e.fullpath()))}):r.push({mode:"100644",filename:e.name,hash:k(e.fullpath())});const n=r.reduce(((e,{mode:t,filename:r,hash:o})=>Buffer.concat([e,Buffer.from(`${t} ${r}\0`),Buffer.from(o,"utf-8")])),Buffer.alloc(0)),i=Buffer.concat([Buffer.from(`tree ${n.length}\0`),n]),a=c.deflateSync(i),d=U(i);return o.mkdirSync(j(d.slice(0,2)),{recursive:!0}),o.writeFileSync(j(d),a),d}const L=e=>{const t=q();if(-1===e.indexOf("."))return t[e]??null;const r=e.split(".");return d(2===r.length,"Invalid config key"),t[r[0]][r[1]]??null},q=()=>{const e=u(),t=o.readFileSync(s.join(e,".gitconfig"),"utf-8"),r=o.readFileSync(S,"utf-8"),c=n(i(r))+n(i(t));return i(c)},W=(e,t,r="Default commit message")=>{if(!B(e))throw new Error(`Object does not exist: ${e}`);if(t&&!B(t))throw new Error(`Parent does not exist: ${e}`);const o=L("user.name"),n=L("user.email");if(!o||!n)throw new Error("User name and email are not set. Please set them in the config file.");const i=`${o} ${n} ${Math.floor(Date.now()/1e3)}`;let s=`tree ${e}\nauthor ${i}\ncommiter ${i}\n\n${r}\n`;t&&(s=`tree ${e}\nparent ${t}\nauthor ${i}\ncommiter ${i}\n\n${r}\n`);const a=`commit ${s.length}\0`+s,d=U(a);return D(d,c.deflateSync(a)),d},_=e=>{if(!B(e))throw new Error(`Commit does not exist: ${e}`);const t=F(e),r=Buffer.from(t.content).toString().split("\n\n"),[o,n]=[r[0],r[1]],i=G(n);return o.split("\n").map((e=>{const[t,...r]=e.split(" ");let o=r[0],n=r[1],s=`${r[2]} ${r[3]??""}`;switch(r.length>3&&(o=`${r[0]} ${r[1]}`,n=`${r[2]}`,s=`${r[3]} ${r[4]??""}`),t){case"author":case"commiter":i[t]={name:o.trim(),email:n.trim(),date:s.trim()};break;case"tree":case"parent":i[t]=r[0]}})),i},G=e=>({tree:"",parent:null,commiter:{name:"",email:"",date:""},author:{name:"",email:"",date:""},message:e});const J=(e=null)=>{e||(e=w("refs"));const t=new Map,r=o.readdirSync(e);for(const n of r){const r=s.join(e,n);if(o.statSync(r).isDirectory()){const e=J(r);for(const[r,o]of e)t.set(r,o)}else{const e=X(r,!0);let o=s.relative(h,r);"\\"===s.sep&&(o=o.replace(/\\/g,"/")),t.set(o,e)}}return t},K=e=>`refs/heads/${e}`,Y=e=>o.existsSync((e=>w(K(e)))(e)),Q=()=>{const e=o.readFileSync(w("HEAD")).toString().trim().replace("\n","");return e.startsWith("ref: refs/heads/")?e.slice(16):null},V=()=>{const e=o.existsSync(w("index"));if(!e)return!1;const t=Y(Q()??"master");return e&&t},X=(e,t=!1)=>{const r=t?e:w(e);if(!o.existsSync(r))return null;const n=o.readFileSync(r).toString().trim().replace("\n","");return n.startsWith("ref: ")?X(n.slice(5)):n},Z=(e,t=null,r=!0)=>{const o=(e=>{if("HEAD"===e)return[X(e)];const t=[];/^[0-9a-f]{40}$/.test(e)&&t.push(e);const r=X(`refs/tags/${e}`);r&&t.push(r);const o=X(`refs/heads/${e}`);return o&&t.push(o),t})(e);if(0===o.length)throw new Error(`No such reference: ${e}`);if(o.length>1)throw new Error(`Ambiguous reference: ${e} \n Candidates: ${o.join(", ")}`);const n=o[0],i=F(n);return t&&i.type!=t?r?"commit"==i.type?_(n).tree:n:null:n},ee=(e,t=37)=>`[${t}m${e}[0m`;const te=(e,t)=>{process.stdout.write(ee(`commit ${e}\n`,33)),process.stdout.write(`Author ${t.author.name} <${t.author.email}>\n`),process.stdout.write(`Date: ${new Date(1e3*parseInt(t.author.date)).toLocaleString("pl")}\n\n`),process.stdout.write(`\t${t.message}\n`)},re=()=>new Promise((e=>{const t=process.stdin.isRaw;process.stdin.setRawMode(!0),process.stdin.resume(),process.stdin.once("data",(r=>{process.stdin.pause(),process.stdin.setRawMode(t),e(r.toString())}))}));const oe=(e,t,r=[])=>{t=$(t);for(const o of e){const e={path:b(t,o.filename),sha:o.hash};if("tree"===o.type){const e=F(o.hash);r.push(...oe(I(e.content),`${t}/${o.filename}`))}else r.push(e)}return r};const ne=(e,t=2)=>{if(0===e)return"0 B";const r=t<0?0:t,o=Math.floor(Math.log(e)/Math.log(1024));return`${parseFloat((e/Math.pow(1024,o)).toFixed(r))} ${["B","KB","MB","GB"][o]}`};var ie=(e=null)=>{if(!V())return void process.stdout.write("");if(!e){const e=K(Q()),t=J();return process.stdout.write("\n"),void t.forEach(((t,r)=>{process.stdout.write(`${r===e?"(*) ":""}${r}\n`)}))}if(Y(e))return void process.stdout.write(`Branch '${e}' already exists\n`);const t=X("HEAD");o.writeFileSync(w(K(e)),`${t}\n`),process.stdout.write(`Created new branch: '${e}'`)},se=(e=".")=>{const t=g(e),r=R("**",{nodir:!0,cwd:t}),n=[];for(const e of r){const t=g(e),r=o.statSync(t),i=k(t);n.push({createdTime:r.birthtime,modifiedTime:r.mtime,dev:r.dev.toString(16),ino:"00",mode:"0a81",uid:"00",gid:r.gid.toString(16),size:r.size,hash:i,fileName:e.replaceAll("\\","/")})}((e=null)=>{let t;t=null===e?M():e;const r=Buffer.alloc(12);r.write("DIRC",0),r.writeUintBE(2,4,4),r.writeUintBE(t.size,8,4);const n=Buffer.byteLength(JSON.stringify(t.entries[0]),"binary")*t.size,i=Buffer.alloc(n);let s=0;for(const e of t.entries)if(i.writeUintBE(parseInt((e.createdTime.getTime()/1e3).toFixed(0)),s,4),i.writeUintBE(0,s+4,4),i.writeUintBE(parseInt((e.modifiedTime.getTime()/1e3).toFixed(0)),s+8,4),i.writeUintBE(0,s+12,4),i.writeUintBE(parseInt(e.dev,16),s+16,4),i.writeUintBE(parseInt(e.ino,16),s+20,4),i.writeUintBE(parseInt(e.mode,16),s+24,4),i.writeUintBE(parseInt(e.uid,16),s+28,4),i.writeUintBE(parseInt(e.gid,16),s+32,4),i.writeUint32BE(e.size,s+36),Buffer.from(e.hash,"hex").copy(i,s+40),i.writeUIntBE(e.fileName.length,s+60,2),s+=62,i.write(e.fileName,s,s+e.fileName.length,"utf8"),s+=e.fileName.length+1,s%8!=0){const e=8-s%8;Buffer.alloc(e,0,"binary").copy(i,s),s+=e}o.writeFileSync(w("index"),Buffer.concat([r,i]))})({version:2,size:n.length,entries:n})},ce=e=>{if(!e)return void process.stdout.write("error: commit message is required\n");if(!(M().size>0))return process.stdout.write("No changes added to commit.\n"),void process.stdout.write("Use node-git add to add changes to the index file.\n");const t=P(),r=W(t,V()?Z("HEAD"):null,e),n=Q();n?o.writeFileSync(w(`refs/heads/${n}`),`${r}\n`):o.writeFileSync(w("HEAD"),`ref: ${r}\n`),process.stdout.write(`Commit created [${n??"HEAD"} ${r.slice(0,7)}] ${e}\n`)};const ae=(new e).name("node-git").usage("[option] <command>").version("1.0.0","-v, --version","Output the current version");ae.command("init").description("Create an empty node-git repository or reinitialize an existing one.").option("-f","Force reinitialization of existing repository").usage(" ").action((e=>(e=>{!o.existsSync(h)||e.f?(process.stdout.write(o.existsSync(h)?`Reinitialized existing node-git repository in ${h}`:`Initialized empty node-git repository in ${h}`),v(),E()):process.stdout.write("Detected existing node-git repository. Use -f flag to force reinitialize.")})(e))),ae.command("cat-file").description("Provide information for repository objects.").argument("<sha1>","Object hash").option("-p","Pretty print object content").option("-t","Instead of the content, show the object type identified by <object>").option("-s","Instead of the content, show the object size identified by <object>").usage("[-pt] <sha1>").action(((e,t)=>{((e,t)=>{const r=F(e);if(t.t)process.stdout.write(r.type);else if(t.s)process.stdout.write(r.size.toString());else if(t.p)if("blob"!==r.type){if("tree"!==r.type){if("commit"===r.type)return console.info("Object type: Commit"),void process.stdout.write(r.content.toString());throw new Error(`Unknown object ${e}`)}{const e=I(r.content);process.stdout.write(e.map((e=>`${e.mode} ${e.type} ${e.hash}    ${e.filename}`)).join("\n"))}}else{const e=r.content.toString().split("\0").join("");process.stdout.write(e)}else process.stdout.write("Missing option -p")})(e,t)})),ae.command("hash-object").description("Calculate SHA1 hash of given file and optionally create a blob from given file.").argument("<file>","Path to file").option("-w","Write object to repository").usage("[-w] <file>").action(((e,t)=>{process.stdout.write(((e,t)=>{const r=o.readFileSync(e),n=`blob ${r.length}\0${r}`;return t.w?k(e):U(n)})(e,t))})),ae.command("write-tree").description("Create a tree object from the current index.").argument("[path]","Root of the tree. Relative to the working directory.").usage("[path]").action((e=>{process.stdout.write(P(e))})),ae.command("commit-tree").description("Create a new commit object").argument("<tree>","Existing tree object").addOption(new t("-p, --parent <hash>","Commit parent")).addOption(new t("-m, --message <string>","Commit message").makeOptionMandatory()).usage("<tree> [-pm]").action(((e,t)=>{process.stdout.write(((e,t)=>W(e,t.parent,t.message))(e,t))})),ae.command("log").description("Show commit logs").addArgument(new r("[commit]","Commit to start at.").default(null).argOptional()).usage("<commit>").action((e=>{(async e=>{if(!V())return null;process.stdout.write("\n"),process.stdout.write("Press 'q' to quit, any other key to continue\n"),process.stdout.write("\n");const t=Z(e??"HEAD"),r=_(t);if(te(t,r),null===r.parent)return;let o=Z(r.parent),n=_(o);for(te(o,n);null!==n.parent;)"q"===(await re()).toLowerCase()&&process.exit(0),o=Z(n.parent),n=_(o),te(o,n)})(e)})),ae.command("ls-files").description("Show information about files in the index and the working tree").option("--verbose","Show verbose output").action((e=>{(e=>{const t=M();e.verbose&&process.stdout.write(`Index file version: ${t.version}, contains ${t.entries.length} entries:\n\n`),process.stdout.write("\n");for(const r of t.entries)process.stdout.write(`${r.fileName}\n`),e.verbose&&(process.stdout.write(`  sha:\t${r.hash}\n`),process.stdout.write(`  created at:\t${r.createdTime.toLocaleString("pl")}\n`),process.stdout.write(`  modified at:\t${r.modifiedTime.toLocaleString("pl")}\n`),process.stdout.write(`  size:\t${ne(r.size)}\n\n`))})(e)})),ae.command("show-ref").description("List references in a local repository").action((()=>{(()=>{const e=J();for(const[t,r]of e)process.stdout.write(`${r} ${t}\n`)})()})),ae.command("status").description("Show status of the working tree and the index").action((()=>{(()=>{V()||process.exit(0);const e=Q();e?process.stdout.write(`On branch ${e}\n\n`):process.stdout.write(`HEAD detached at ${e}\n`),process.stdout.write("Changes to be committed:\n");const t=M(),r=Z("HEAD","tree"),o=F(r),n=I(o.content),i=oe(n,"."),s=t.entries.reduce(((e,t)=>(e[t.hash]=t.fileName,e)),{}),c=i.reduce(((e,t)=>(e[t.path]=t.sha,e)),{});for(const[e,t]of Object.entries(s))c[t]?(c[t]!==e&&process.stdout.write(ee(`\tmodified: ${t}\n`,32)),delete c[t]):process.stdout.write(ee(`\tnew file: ${t}\n`,32));for(const e of Object.keys(c))process.stdout.write(ee(`\tdeleted: ${e}\n`,31));process.stdout.write("\nChanges not staged for commit:\n");const a=R("**",{root:"",cwd:g(),stat:!0,nodir:!0,withFileTypes:!0},!0),d=new Map;for(const e of a){const t=$(e.relative());d.set(t,{fileName:t,createdTime:e.birthtime??new Date,modifiedTime:e.mtime??new Date,size:e.size??0})}for(const e of t.entries){const t=e.fileName,r=d.get(t)??null;r?(l=r.modifiedTime,new Date(1e3*Math.round(l.getTime()/1e3))!==e.modifiedTime?(k(g(t))!==e.hash&&process.stdout.write(ee(`\tmodified: ${t}\n`,31)),d.delete(t)):d.delete(t)):process.stdout.write(ee(`\tdeleted: ${t}\n`,31))}var l;process.stdout.write("\nUntracked files:\n");for(const e of d.keys())process.stdout.write(ee(`\tnew file: ${e}\n`,31))})()})),ae.command("rev-parse").description("Parse revision (or other objects) identifiers").argument("<name>","Name to parse").addOption(new t("-t, --type <type>","Specify the expected type").choices(["blob","commit","tree"]).default(null)).action(((e,t)=>{((e,t=null,r=!0)=>{process.stdout.write(Z(e,t,r))})(e,t.type)})),ae.command("checkout").description("Switch branches or restore working tree files").argument("<branch-name>","Name of the branch").addArgument(new r("[directory]","Empty directory to write files to").default(".")).addOption(new t("-b --branch","Create a new branch named <branch-name>")).addOption(new t("--commit <commit>","Restore working tree files from the given commit. This will detach HEAD from the current branch.")).usage("<branch-name> [--commit <commit>] [directory]").action(((e,t,r)=>{((e,t,r)=>{if(r.commit){const e=r.commit.toString(),n=Z(e),i=F(n),s=g(t);return y(s),A(I(i.content),s),o.writeFileSync(w("HEAD"),`ref: ${e}\n`),void process.stdout.write(`HEAD detached at ${e}`)}if(r.branch&&(ie(e),process.stdout.write("\n")),!Y(e))return void process.stdout.write(`Branch '${e}' does not exist`);const n=K(e),i=X(n),s=_(i).tree,c=F(s),a=g(t);y(a),A(I(c.content),a),o.writeFileSync(w("HEAD"),`ref: ${n}\n`),process.stdout.write(`Switched to branch '${e}'`)})(e,t,r)})),ae.command("branch").description("List, create, or delete branches").addArgument(new r("[branch]","Branch name").default(null)).action((e=>{ie(e)})),ae.command("add").description("Add file contents to the index").action((()=>{se()})),ae.command("commit").description("Record changes to the repository").addOption(new t("-m, --message <message>","Commit message").default(null)).action((e=>{ce(e.message)})),ae.command("show-ignore").description("Show all ignored paths. Reads all .gitignore files in the repository.").action((()=>{(()=>{process.stdout.write("Ignored files:\n\n");const e=O();for(const t of e)process.stdout.write(t+"\n")})()})),ae.parse(process.argv);
