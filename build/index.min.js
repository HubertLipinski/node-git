#! /usr/bin/env node
import{Command as e,Option as t,Argument as r}from"commander";import n from"node:fs";import{stringify as o,parse as i}from"ini";import s from"path";import c from"node:zlib";import a from"node:crypto";import d from"node:assert";import{globSync as l}from"glob";import{EOL as m,homedir as u}from"os";const f=process.cwd(),p=process.env._NODE_GIT_DIRECTORY??".nodegit",h=s.join(f,p),g=(...e)=>0===e.length?h:s.join(h,...e),w=(e="")=>s.join(f,e),y=(e,t=!1)=>{!t&&n.existsSync(e)||n.mkdirSync(e)},b=s.join(h,"config");const S=()=>{n.mkdirSync(h,{recursive:!0}),n.mkdirSync(g("objects"),{recursive:!0}),n.mkdirSync(g("refs","heads"),{recursive:!0}),n.writeFileSync(g("HEAD"),"ref: refs/heads/master\n")},$=()=>{n.writeFileSync(b,o({core:{repositoryformatversion:0,filemode:!1,bare:!1}}))},v=e=>({directory:e.slice(0,2),filename:e.slice(2)}),E=e=>{const t=v(e);return n.existsSync(g("objects",t.directory,t.filename))},x=(e,t=!0)=>{const r=v(e);return t?g("objects",r.directory,r.filename):`${r.directory}/${r.filename}`},B=e=>{const t=(e=>{const t=v(e),r=g("objects",t.directory,t.filename);if(!E(e))throw new Error(`File not found: ${e}`);return n.readFileSync(r)})(e),r=c.inflateSync(t),o=r.toString(),i=o.split(" ")[0],s=o.split(" ")[1].split("\0")[0],a=r.subarray(i.length+s.length+2);return{type:i,size:parseInt(s),content:a}},j=(e,t)=>{const r=v(e);n.mkdirSync(g("objects",r.directory),{recursive:!0}),n.writeFileSync(x(e),t)},D=e=>{const t=[];let r=0;for(;r<e.length-40+1;){const n=e.indexOf(0,r),[o,i]=e.subarray(r,n).toString("utf8").split(" "),s=e.subarray(n+1,n+40+1).toString("utf8");r=n+40+1,t.push({mode:o,type:I(o),hash:s,filename:i})}return t},F=(e,t)=>{for(const r of e){const e=s.join(t,r.filename),o=B(r.hash);if("tree"===r.type){n.existsSync(e)||n.mkdirSync(e);const o=B(r.hash);F(D(o.content),`${t}/${r.filename}`)}else"blob"===r.type&&n.writeFileSync(e,o.content,{encoding:"utf-8"})}},I=e=>{switch(e){case"040000":return"tree";case"100644":case"100755":case"120000":return"blob";default:throw new Error(`Unknown file mode: ${e}`)}};const A=(e,t="hex")=>a.createHash("sha1").update(e).digest(t),U=e=>{if(!n.existsSync(e))throw new Error(`File not found: ${e}`);const t=n.readFileSync(e),r=`blob ${t.length}\0${t}`,o=A(r),i=c.deflateSync(r);return j(o,i),o};const z=()=>{const e=[];for(const t of(()=>{const e=[{path:w(),rules:[{rule:".git/**",ignored:!0},{rule:".nodegit/**",ignored:!0}]}],t=n.readdirSync(w(),{recursive:!0,withFileTypes:!0}).filter((e=>".gitignore"===e.name));for(const r of t){const t=s.relative(w(),r.path),n={path:0===t.length?".":t,rules:k(s.join(r.path,".gitignore"))};e.push(n)}return e})())t.rules.forEach((r=>{e.push(s.join(t.path,r.rule).replaceAll(/\\/g,"/"))}));return e},k=e=>{const t=[],r=n.readFileSync(e,"utf-8").toString().split(m);for(const e of r){const r=C(e);r&&t.push(r)}return t},C=e=>{const t=e.replace(m,"").trim().replaceAll(/\\/g,"/");switch(t[0]??""){case"#":case"":return null;case"!":return{rule:O(t.slice(1)),ignored:!1};case"\\":return{rule:O(t.slice(1)),ignored:!0};default:return{rule:O(t),ignored:!0}}},O=e=>e.endsWith("/")?e+"**":e,H=()=>{const e=g("index");if(!n.existsSync(e))return{version:2,size:0,entries:[]};const t=n.readFileSync(e,"binary"),r=Buffer.from(t,"binary"),o=r.subarray(0,12),i=o.subarray(0,4);d("DIRC"===i.toString(),"Invalid signature");const s=o.readUIntBE(4,4);d(2===s,"Only version 2 is supported");const c=o.readUIntBE(8,4),a=[];let l=0;const m=r.subarray(o.length);for(let e=0;e<c;e++){const e=m.subarray(l,l+4),t=m.subarray(l+8,l+12),r=m.subarray(l+16,l+20),n=m.subarray(l+20,l+24),o=m.subarray(l+24,l+28),i=m.subarray(l+28,l+32),s=m.subarray(l+32,l+36),c=m.readUInt32BE(l+36),d=m.subarray(l+40,l+60),u=m.readUIntBE(l+60,2).toString(2),f=u[0].toString(),p=u[1]?.toString()??"-1",h=parseInt(u.slice(1,3),2),g=4095&parseInt(u,2);let w=null;if(l+=62,!(g<4095))throw new Error(`File name length is too long: ${g} > 4095 bytes`);w=m.subarray(l,l+g).toString("utf8"),l+=g+1,l=8*Math.ceil(l/8),a.push({createdTime:T(e),modifiedTime:T(t),dev:r.toString("hex"),ino:n.toString("hex"),mode:o.toString("hex"),uid:i.toString("hex"),gid:s.toString("hex"),size:c,hash:d.toString("hex"),fileName:w,flags:{binary:u.toString(),valid:f,extended:p,stage:h.toString(2)}})}return{version:s,size:c,entries:a}},T=e=>new Date(1e3*parseInt(e.toString("hex"),16)),N=(e="**",t={})=>l(e,{ignore:z(),dot:!0,...t});function R(e="."){const t=N("*",{root:"",cwd:w(e),stat:!0,withFileTypes:!0}),r=[];for(const e of t)e.isDirectory()?r.push({mode:"040000",filename:e.name,hash:R(e.relative())}):r.push({mode:"100644",filename:e.name,hash:U(e.fullpath())});const o=r.reduce(((e,{mode:t,filename:r,hash:n})=>Buffer.concat([e,Buffer.from(`${t} ${r}\0`),Buffer.from(n,"utf-8")])),Buffer.alloc(0)),i=Buffer.concat([Buffer.from(`tree ${o.length}\0`),o]),s=c.deflateSync(i),a=A(i);return n.mkdirSync(x(a.slice(0,2)),{recursive:!0}),n.writeFileSync(x(a),s),a}const M=e=>{const t=P();if(-1===e.indexOf("."))return t[e]??null;const r=e.split(".");return d(2===r.length,"Invalid config key"),t[r[0]][r[1]]??null},P=()=>{const e=u(),t=n.readFileSync(s.join(e,".gitconfig"),"utf-8"),r=n.readFileSync(b,"utf-8"),c=o(i(r))+o(i(t));return i(c)},L=(e,t,r="Default commit message")=>{if(!E(e))throw new Error(`Object does not exist: ${e}`);if(t&&!E(t))throw new Error(`Parent does not exist: ${e}`);const n=M("user.name"),o=M("user.email");if(!n||!o)throw new Error("User name and email are not set. Please set them in the config file.");const i=`${n} ${o} ${Math.floor(Date.now()/1e3)}`;let s=`tree ${e}\nauthor ${i}\ncommiter ${i}\n\n${r}\n`;t&&(s=`tree ${e}\nparent ${t}\nauthor ${i}\ncommiter ${i}\n\n${r}\n`);const a=`commit ${s.length}\0`+s,d=A(a);return j(d,c.deflateSync(a)),d},q=e=>{if(!E(e))throw new Error(`Commit does not exist: ${e}`);const t=B(e),r=Buffer.from(t.content).toString().split("\n\n"),[n,o]=[r[0],r[1]],i=W(o);return n.split("\n").map((e=>{const[t,...r]=e.split(" ");let n=r[0],o=r[1],s=`${r[2]} ${r[3]??""}`;switch(r.length>3&&(n=`${r[0]} ${r[1]}`,o=`${r[2]}`,s=`${r[3]} ${r[4]??""}`),t){case"author":case"commiter":i[t]={name:n.trim(),email:o.trim(),date:s.trim()};break;case"tree":case"parent":i[t]=r[0]}})),i},W=e=>({tree:"",parent:null,commiter:{name:"",email:"",date:""},author:{name:"",email:"",date:""},message:e});const _=(e=null)=>{e||(e=g("refs"));const t=new Map,r=n.readdirSync(e);for(const o of r){const r=s.join(e,o);if(n.statSync(r).isDirectory()){const e=_(r);for(const[r,n]of e)t.set(r,n)}else{const e=Q(r,!0);let n=s.relative(h,r);"\\"===s.sep&&(n=n.replace(/\\/g,"/")),t.set(n,e)}}return t},G=e=>`refs/heads/${e}`,J=e=>n.existsSync((e=>g(G(e)))(e)),K=()=>{const e=n.readFileSync(g("HEAD")).toString().trim().replace("\n","");return e.startsWith("ref: refs/heads/")?e.slice(16):null},Y=()=>{const e=n.existsSync(g("index"));if(!e)return!1;const t=J(K()??"master");return e&&t},Q=(e,t=!1)=>{const r=t?e:g(e);if(!n.existsSync(r))return null;const o=n.readFileSync(r).toString().trim().replace("\n","");return o.startsWith("ref: ")?Q(o.slice(5)):o},V=(e,t=null,r=!0)=>{const n=(e=>{if("HEAD"===e)return[Q(e)];const t=[];/^[0-9a-f]{40}$/.test(e)&&t.push(e);const r=Q(`refs/tags/${e}`);r&&t.push(r);const n=Q(`refs/heads/${e}`);return n&&t.push(n),t})(e);if(0===n.length)throw new Error(`No such reference: ${e}`);if(n.length>1)throw new Error(`Ambiguous reference: ${e} \n Candidates: ${n.join(", ")}`);const o=n[0],i=B(o);return t&&i.type!=t?r?"commit"==i.type?q(o).tree:o:null:o};const X=(e,t)=>{process.stdout.write(`[33mcommit ${e}[0m\n`),process.stdout.write(`Author ${t.author.name} <${t.author.email}>\n`),process.stdout.write(`Date: ${new Date(1e3*parseInt(t.author.date)).toLocaleString("pl")}\n\n`),process.stdout.write(`\t${t.message}\n`)},Z=()=>new Promise((e=>{const t=process.stdin.isRaw;process.stdin.setRawMode(!0),process.stdin.resume(),process.stdin.once("data",(r=>{process.stdin.pause(),process.stdin.setRawMode(t),e(r.toString())}))}));const ee=(e,t=2)=>{if(0===e)return"0 B";const r=t<0?0:t,n=Math.floor(Math.log(e)/Math.log(1024));return`${parseFloat((e/Math.pow(1024,n)).toFixed(r))} ${["B","KB","MB","GB"][n]}`};var te=(e=null)=>{if(!Y())return void process.stdout.write("");if(!e){const e=G(K()),t=_();return process.stdout.write("\n"),void t.forEach(((t,r)=>{process.stdout.write(`${r===e?"(*) ":""}${r}\n`)}))}if(J(e))return void process.stdout.write(`Branch '${e}' already exists\n`);const t=Q("HEAD");n.writeFileSync(g(G(e)),`${t}\n`),process.stdout.write(`Created new branch: '${e}'`)},re=(e=".")=>{const t=w(e),r=N("**",{nodir:!0,cwd:t}),o=[];for(const e of r){const t=w(e),r=n.statSync(t),i=U(t);o.push({createdTime:r.birthtime,modifiedTime:r.mtime,dev:r.dev.toString(16),ino:"00",mode:"0a81",uid:"00",gid:r.gid.toString(16),size:r.size,hash:i,fileName:e.replaceAll("\\","/")})}((e=null)=>{let t;t=null===e?H():e;const r=Buffer.alloc(12);r.write("DIRC",0),r.writeUintBE(2,4,4),r.writeUintBE(t.size,8,4);const o=Buffer.byteLength(JSON.stringify(t.entries[0]),"binary")*t.size,i=Buffer.alloc(o);let s=0;for(const e of t.entries)if(i.writeUintBE(parseInt((new Date(e.createdTime).getTime()/1e3).toFixed(0)),s,4),i.writeUintBE(0,s+4,4),i.writeUintBE(parseInt((new Date(e.modifiedTime).getTime()/1e3).toFixed(0)),s+8,4),i.writeUintBE(0,s+12,4),i.writeUintBE(parseInt(e.dev,16),s+16,4),i.writeUintBE(parseInt(e.ino,16),s+20,4),i.writeUintBE(parseInt(e.mode,16),s+24,4),i.writeUintBE(parseInt(e.uid,16),s+28,4),i.writeUintBE(parseInt(e.gid,16),s+32,4),i.writeUint32BE(e.size,s+36),Buffer.from(e.hash,"hex").copy(i,s+40),i.writeUIntBE(e.fileName.length,s+60,2),s+=62,i.write(e.fileName,s,s+e.fileName.length,"utf8"),s+=e.fileName.length+1,s%8!=0){const e=8-s%8;Buffer.alloc(e,0,"binary").copy(i,s),s+=e}n.writeFileSync(g("index"),Buffer.concat([r,i]))})({version:2,size:o.length,entries:o})},ne=e=>{if(!e)return void process.stdout.write("error: commit message is required\n");if(!(H().size>0))return process.stdout.write("No changes added to commit.\n"),void process.stdout.write("Use node-git add to add changes to the index file.\n");const t=R(),r=L(t,Y()?V("HEAD"):null,e),o=K();o?n.writeFileSync(g(`refs/heads/${o}`),`${r}\n`):n.writeFileSync(g("HEAD"),`ref: ${r}\n`),process.stdout.write(`Commit created [${o??"HEAD"} ${r.slice(0,7)}] ${e}\n`)};const oe=(new e).name("node-git").usage("[option] <command>").version("1.0.0","-v, --version","Output the current version");oe.command("init").description("Create an empty node-git repository or reinitialize an existing one.").option("-f","Force reinitialization of existing repository").usage(" ").action((e=>(e=>{!n.existsSync(h)||e.f?(process.stdout.write(n.existsSync(h)?`Reinitialized existing node-git repository in ${h}`:`Initialized empty node-git repository in ${h}`),S(),$()):process.stdout.write("Detected existing node-git repository. Use -f flag to force reinitialize.")})(e))),oe.command("cat-file").description("Provide information for repository objects.").argument("<sha1>","Object hash").option("-p","Pretty print object content").option("-t","Instead of the content, show the object type identified by <object>").option("-s","Instead of the content, show the object size identified by <object>").usage("[-pt] <sha1>").action(((e,t)=>{((e,t)=>{const r=B(e);if(t.t)process.stdout.write(r.type);else if(t.s)process.stdout.write(r.size.toString());else if(t.p)if("blob"!==r.type){if("tree"!==r.type){if("commit"===r.type)return console.info("Object type: Commit"),void process.stdout.write(r.content.toString());throw new Error(`Unknown object ${e}`)}{const e=D(r.content);process.stdout.write(e.map((e=>`${e.mode} ${e.type} ${e.hash}    ${e.filename}`)).join("\n"))}}else{const e=r.content.toString().split("\0").join("");process.stdout.write(e)}else process.stdout.write("Missing option -p")})(e,t)})),oe.command("hash-object").description("Calculate SHA1 hash of given file and optionally create a blob from given file.").argument("<file>","Path to file").option("-w","Write object to repository").usage("[-w] <file>").action(((e,t)=>{process.stdout.write(((e,t)=>{const r=n.readFileSync(e),o=`blob ${r.length}\0${r}`;return t.w?U(e):A(o)})(e,t))})),oe.command("write-tree").description("Create a tree object from the current index.").argument("[path]","Root of the tree. Relative to the working directory.").usage("[path]").action((e=>{process.stdout.write(R(e))})),oe.command("commit-tree").description("Create a new commit object").argument("<tree>","Existing tree object").addOption(new t("-p, --parent <hash>","Commit parent")).addOption(new t("-m, --message <string>","Commit message").makeOptionMandatory()).usage("<tree> [-pm]").action(((e,t)=>{process.stdout.write(((e,t)=>L(e,t.parent,t.message))(e,t))})),oe.command("log").description("Show commit logs").addArgument(new r("[commit]","Commit to start at.").default(null).argOptional()).usage("<commit>").action((e=>{(async e=>{if(!Y())return null;process.stdout.write("\n"),process.stdout.write("Press 'q' to quit, any other key to continue\n"),process.stdout.write("\n");const t=V(e??"HEAD"),r=q(t);if(X(t,r),null===r.parent)return;let n=V(r.parent),o=q(n);for(X(n,o);null!==o.parent;)"q"===(await Z()).toLowerCase()&&process.exit(0),n=V(o.parent),o=q(n),X(n,o)})(e)})),oe.command("ls-files").description("Show information about files in the index and the working tree").option("--verbose","Show verbose output").action((e=>{(e=>{const t=H();e.verbose&&process.stdout.write(`Index file version: ${t.version}, contains ${t.entries.length} entries:\n\n`),process.stdout.write("\n");for(const r of t.entries)process.stdout.write(`${r.fileName}\n`),e.verbose&&(process.stdout.write(`  sha:\t${r.hash}\n`),process.stdout.write(`  created at:\t${new Date(r.createdTime).toLocaleString("pl")}\n`),process.stdout.write(`  modified at:\t${new Date(r.modifiedTime).toLocaleString("pl")}\n`),process.stdout.write(`  size:\t${ee(r.size)}\n\n`))})(e)})),oe.command("show-ref").description("List references in a local repository").action((()=>{(()=>{const e=_();for(const[t,r]of e)process.stdout.write(`${r} ${t}\n`)})()})),oe.command("status").description("Show status of the working tree and the index").action((()=>{(()=>{const e=K();e?process.stdout.write(`On branch ${e}\n\n`):process.stdout.write(`HEAD detached at ${e}\n`),Y()?(process.stdout.write("Changes to be committed:\n\n"),H(),Q("HEAD")):process.stdout.write("No commits yet\n\n")})()})),oe.command("rev-parse").description("Parse revision (or other objects) identifiers").argument("<name>","Name to parse").addOption(new t("-t, --type <type>","Specify the expected type").choices(["blob","commit","tree"]).default(null)).action(((e,t)=>{((e,t=null,r=!0)=>{process.stdout.write(V(e,t,r))})(e,t.type)})),oe.command("checkout").description("Switch branches or restore working tree files").argument("<branch-name>","Name of the branch").addArgument(new r("[directory]","Empty directory to write files to").default(".")).addOption(new t("-b --branch","Create a new branch named <branch-name>")).addOption(new t("--commit <commit>","Restore working tree files from the given commit. This will detach HEAD from the current branch.")).usage("<branch-name> [--commit <commit>] [directory]").action(((e,t,r)=>{((e,t,r)=>{if(r.commit){const e=r.commit.toString(),o=V(e),i=B(o),s=w(t);return y(s),F(D(i.content),s),n.writeFileSync(g("HEAD"),`ref: ${e}\n`),void process.stdout.write(`HEAD detached at ${e}`)}if(r.branch&&(te(e),process.stdout.write("\n")),!J(e))return void process.stdout.write(`Branch '${e}' does not exist`);const o=G(e),i=Q(o),s=q(i).tree,c=B(s),a=w(t);y(a),F(D(c.content),a),n.writeFileSync(g("HEAD"),`ref: ${o}\n`),process.stdout.write(`Switched to branch '${e}'`)})(e,t,r)})),oe.command("branch").description("List, create, or delete branches").addArgument(new r("[branch]","Branch name").default(null)).action((e=>{te(e)})),oe.command("add").description("Add file contents to the index").action((()=>{re()})),oe.command("commit").description("Record changes to the repository").addOption(new t("-m, --message <message>","Commit message").default(null)).action((e=>{ne(e.message)})),oe.command("show-ignore").description("Show all ignored paths. Reads all .gitignore files in the repository.").action((()=>{(()=>{process.stdout.write("Ignored files:\n\n");const e=z();for(const t of e)process.stdout.write(t+"\n")})()})),oe.parse(process.argv);
